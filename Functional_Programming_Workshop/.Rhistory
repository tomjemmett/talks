group_by(period) %>%
summarise_at(vars(attendances), sum) %>%
ggplot(aes(period, attendances)) +
geom_line() +
geom_point() +
labs(title = "AE Attendances",
subtitle = paste0(org_code, ": Type ", type))
}
plots <- df %>%
pmap(ae_attendances_plot)
# now, show all 10 plots (use the <- / -> buttons in the plots pane to view them)
plots
# the names of these items in the plots list aren't very useful, we could use the
# set_names function and map2_chr to generate more useful names!
plots <- plots %>%
set_names(map2_chr(df$org_code, df$type, ~paste0(.x, "_type_", .y)))
plots
# generate a simple dataset containing two columns that contain 10 rows with two
# columns, each column with have all of the numbers from 1 to 10 once
df <- tibble(x = sample(1:10, 10),
y = sample(1:10, 10))
df %>%
mutate(min = map2_dbl(x, y, min))
df%>%group_by(rowwise(df))
df %>%
rowwise() %>%
mutate(min = min(x, y))
df %>%
mutate(.id = row_number()) %>%
pivot_longer(cols = c(x, y)) %>%
group_by(.id) %>%
mutate(min = min(value)) %>%
pivot_wider(names_from = name,
values_from = value) %>%
ungroup() %>%
select(x, y, min)
library(tidyverse)
library(NHSRdatasets)
num_months <- n_distinct(ae_attendances$period)
df <- ae_attendances %>%
group_by(org_code) %>%
# find all of the organisations that have reported type 1 attendances
# for each of the months
filter(sum(type == 1) == num_months) %>%
# add in the type column to the grouping
group_by(type, add = TRUE) %>%
# nest the dataframe by the groupings
# all of the other columns become a nested dataframe in the "data" column
group_nest()
df
# We've got 271 rows of data here, so to speed things up, let's only keep the
# first 10 rows
df <- head(df, 10)
# In exercise 3 we created a function that generated a plot for us, below is a
# slightly modified version of this function. Note that pmap requires the
# arguments of a function to have the exact same name as the list items (or,
# when working with a dataframe, the column names). However, the arguments do
# not need to be in the same order as they appear in the list/dataframe!
ae_attendances_plot <- function(data, org_code, type) {
title <- paste0("AE Attendances")
data %>%
group_by(period) %>%
summarise_at(vars(attendances), sum) %>%
ggplot(aes(period, attendances)) +
geom_line() +
geom_point() +
labs(title = "AE Attendances",
subtitle = paste0(org_code, ": Type ", type))
}
plots <- YOUR_CODE_HERE
df %>%
pmap(ae_attendances_plot)
num_months <- n_distinct(ae_attendances$period)
View(df)
# We've got 271 rows of data here, so to speed things up, let's only keep the
# first 10 rows
df <- head(df, 10)
df# In exercise 3 we created a function that generated a plot for us, below is a
View(ae_attendances_plot)
# let's use the previous solution
source("Solution_08.R")
# create a directory to store plots in, if it doesn't exist
if (!dir.exists("plots")) dir.create("plots")
# we can use the names assinged to the list items of the plots object
names(plots)
filenames <- paste0(names(plots), ".png")
walk2(filenames,
plots,
ggsave,
device = "png",
path = "plots",
type = "cairo-png",
dpi = "retina")
library(NHSRdatasets)
library(rmarkdown)
if (!dir.exists("reports")) dir.create("reports")
org_codes <- ae_attendances %>%
group_by(org_code) %>%
filter(sum(type == 1) == 36) %>%
pull(org_code) %>%
as.character() %>%
unique() %>%
# only take the top 10 values otherwise it will take ages to run!
head(10)
render_report <- function(org_code) {
filename <- glue::glue("reports/{org_code}.docx")
# alternative, paste0("reports/", org_code, ".docx")
render("ae_report.Rmd",
output_format = "word_document",
output_file = filename,
params = list( org_code = org_code ))
}
walk(org_codes, render_report)
walk(org_codes,
~render("ae_report.Rmd",
output_format = "word_document",
output_file = glue::glue("reports/{.x}.docx"),
params = list( org_code = .x )))
# both will do exactly the same, it just depends on what you think is more readable
library(tidyverse)
library(NHSRdatasets)
library(rmarkdown)
if (!dir.exists("reports")) dir.create("reports")
org_codes <- ae_attendances %>%
group_by(org_code) %>%
filter(sum(type == 1) == 36) %>%
pull(org_code) %>%
as.character() %>%
unique() %>%
# only take the top 10 values otherwise it will take ages to run!
head(10)
render_report <- function(org_code) {
filename <- glue::glue("reports/{org_code}.docx")
# alternative, paste0("reports/", org_code, ".docx")
render("ae_report.Rmd",
output_format = "word_document",
output_file = filename,
params = list( org_code = org_code ))
}
walk(org_codes, render_report)
walk(org_codes,
~render("ae_report.Rmd",
output_format = "word_document",
output_file = glue::glue("reports/{.x}.docx"),
params = list( org_code = .x )))
library(tidyverse)
files <- c("data/ae_attendances/2019-01-01.csv",
"data/ae_attendances/2019-02-01.csv",
"data/ae_attendances/2019-03-01.csv",
"data/ae_attendances/2019-04-01.csv")
col_types <- cols(
period = col_date(format = ""),
org_code = col_character(),
type = col_character(),
attendances = col_double(),
breaches = col_double(),
admissions = col_double()
)
map(files, safely(read_csv), col_types = col_types)
map(files, safely(read_csv), col_types = col_types) %>%
transpose() %>%
pluck("result") %>%
bind_rows()
mpg
library(tidyverse)
mpg
tibble(v = sample(c(1:5, NA), 1000, replace = TRUE)
)
tibble(k = floor(((1:n)-1) / 4),
tibble(k = floor(((1:n)-1) / 4),
v = sample(c(1:5, NA), n, replace = TRUE))
tibble(k = floor(((1:n)-1) / 4),
v = sample(c(1:5, NA), n, replace = TRUE))
n <- 1000
1:n
(1:n)-1
((1:n)-1)/4
floor(((1:n)-1)/4)
tibble(k = letters[((1:n) %% 4) + 1],
v = sample(c(1:5, NA), n, replace = TRUE))
tibble(k = letters[((1:n) %% 4) + 1],
v = sample(c(1:5, NA), n, replace = TRUE)) %>%
pivot_wider(names_from = k, values_from = v)
tibble(v = sample(c(1:5, NA), n, replace = TRUE))
map_dfr(letters[1:4],
~tibble(r = 1:n,
k = .x,
v = sample(c(1:5, NA), n, replace = TRUE))) %>%
pivot_wider(names_from = k,
values_from = v)
df <- map_dfr(letters[1:4],
~tibble(r = 1:n,
k = .x,
v = sample(c(1:5, NA), n, replace = TRUE))) %>%
pivot_wider(names_from = k,
values_from = v)
df
df %>%
map_dfr(is.na)
df %>%
map_dfr(is.na) %>%
pmap(sum)
df %>%
map_dfr(is.na) %>%
pmap_dfr(sum)
df %>%
map_dfr(is.na) %>%
pmap_dbl(sum)
df %>%
mutate(na_cols = df %>%
map_dfr(is.na) %>%
pmap_dbl(sum))
df %>%
mutate(na_cols = df %>%
select(a:d) %>%
map_dfr(is.na) %>%
pmap_dbl(sum))
map_dfr(letters[1:4],
~tibble(r = 1:n,
k = .x,
v = sample(c(1:5, NA), n, replace = TRUE))) %>%
reduce(inner_join, by = "id")
map(letters[1:4],
~tibble(r = 1:n,
k = .x,
v = sample(c(1:5, NA), n, replace = TRUE)))
library(rlang)
df <- map(letters[1:4],
~tibble(r = 1:n,
{.x} := sample(c(1:5, NA), n, replace = TRUE))) %>%
reduce(inner_join, by = "id")
df <- map(letters[1:4],
~tibble(r = 1:n,
.x := sample(c(1:5, NA), n, replace = TRUE))) %>%
reduce(inner_join, by = "id")
map(letters[1:4],
~tibble(r = 1:n,
.x := sample(c(1:5, NA), n, replace = TRUE)))
map(letters[1:4],
~tibble(r = 1:n,
{.x} := sample(c(1:5, NA), n, replace = TRUE)))
df <- map(letters[1:4],
~tibble(r = 1:n,
as.symbol(.x) := sample(c(1:5, NA), n, replace = TRUE))) %>%
reduce(inner_join, by = "id")
as_symbol("hi")
as.symbol("hi")
?as.symbol
df <- letters[1:4] %>%
map(as.symbol) %>%
map(~tibble(r = 1:n,
{.x} := sample(c(1:5, NA), n, replace = TRUE))) %>%
reduce(inner_join, by = "id")
letters[1:4] %>%
map(as.symbol) %>%
map(~tibble(r = 1:n,
{.x} := sample(c(1:5, NA), n, replace = TRUE)))
letters[1:4] %>%
map(as.symbol)
letters[1:4] %>%
map(as.symbol) %>%
map(~tibble(r = 1:n,
{{.x}} := sample(c(1:5, NA), n, replace = TRUE)))
df <- letters[1:4] %>%
map(as.symbol) %>%
map(~tibble(r = 1:n,
!!.x := sample(c(1:5, NA), n, replace = TRUE))) %>%
reduce(inner_join, by = "id")
letters[1:4] %>%
map(as.symbol) %>%
map(~tibble(r = 1:n,
!!.x := sample(c(1:5, NA), n, replace = TRUE)))
df <- letters[1:4] %>%
map(as.symbol) %>%
map(~tibble(id = 1:n,
!!.x := sample(c(1:5, NA), n, replace = TRUE))) %>%
reduce(inner_join, by = "id")
df
# generate a table with n rows of data with columns named a, b, c, d
df <- letters[1:4] %>%
map(as.symbol) %>%
map(~tibble(id = 1:n,
!!.x := sample(c(1:5, NA), n, replace = TRUE))) %>%
# reduce the 4 list items to a single table by repeatedly inner joining
reduce(inner_join, by = "id")
df
letters[1:4] %>%
set_names()
letters[1:4] %>%
set_names() %>%
map(~sample(c(1:5, NA), n, replace = TRUE))
letters[1:4] %>%
set_names() %>%
map_dfr(~sample(c(1:5, NA), n, replace = TRUE))
# generate a table with n rows of data with columns named a, b, c, d
df <- letters[1:4] %>%
set_names() %>%
map_dfr(~sample(c(1:5, NA), n, replace = TRUE)) %>%
mutate(id = row_number()) %>%
select(id, everything())
df
df %>%
mutate(na_cols = df %>%
select(a:d) %>%
map_dfr(is.na) %>%
pmap_dbl(sum))
# create a column called na_cols which counts how many of the values in each row
# are na.
df %>%
mutate(na_cols = df %>%
select(a:d) %>%
map(is.na) %>%
pmap_dbl(sum))
df %>%
select(a:d) %>%
map(is.na)
library(tidyverse)
library(NHSRdatasets)
num_months <- n_distinct(ae_attendances$period)
df <- ae_attendances %>%
group_by(org_code) %>%
# find all of the organisations that have reported type 1 attendances
# for each of the months
filter(sum(type == 1) == num_months) %>%
# add in the type column to the grouping
group_by(type, add = TRUE) %>%
# nest the dataframe by the groupings
# all of the other columns become a nested dataframe in the "data" column
group_nest()
df
# We've got 271 rows of data here, so to speed things up, let's only keep the
# first 10 rows
df <- head(df, 10)
df
df %>%
mutate(plot = pmap(list(org_code, type, data), ae_attendances_plot))
# In exercise 3 we created a function that generated a plot for us, below is a
# slightly modified version of this function. Note that pmap requires the
# arguments of a function to have the exact same name as the list items (or,
# when working with a dataframe, the column names). However, the arguments do
# not need to be in the same order as they appear in the list/dataframe!
ae_attendances_plot <- function(data, org_code, type) {
title <- paste0("AE Attendances")
data %>%
group_by(period) %>%
summarise_at(vars(attendances), sum) %>%
ggplot(aes(period, attendances)) +
geom_line() +
geom_point() +
labs(title = "AE Attendances",
subtitle = paste0(org_code, ": Type ", type))
}
df %>%
mutate(plot = pmap(list(org_code, type, data), ae_attendances_plot))
df
df %>%
mutate(plot = pmap(list(data, org_code, type), ae_attendances_plot))
df %>% mutate(v = list(data, org_code, type))
list(n)
list(df$org_code)
df %>%
mutate(plot = pmap(list(org_code = org_code,
type = type,
data = data),
ae_attendances_plot))
library(tidyverse)
library(NHSRdatasets)
ae_attendances
df <- ae_attendances %>%
group_by(org_code) %>%
filter(sum(type == 1) == n_months) %>%
group_by(type, add = TRUE) %>%
nest()
source('~/.active-rstudio-document', echo=TRUE)
df
df <- ae_attendances %>%
group_by(org_code) %>%
filter(sum(type == 1) == n_months) %>%
nest()
df
library(patchwork)
df
df <- ae_attendances %>%
group_by(org_code) %>%
filter(sum(type == 1) == n_months)
df
df <- ae_attendances %>%
group_by(org_code) %>%
filter(sum(type == 1) == n_months) %>%
group_by(period, add = TRUE) %>%
summarise_if(is.numeric, sum)
df
df <- ae_attendances %>%
group_by(org_code) %>%
filter(sum(type == 1) == n_months) %>%
group_by(period, add = TRUE) %>%
summarise_if(is.numeric, sum) %>%
nest()
df
df.x <- df[1,"data"]
df.x
df.x <- df[1,]$data[[1]]
df.x
ggplot(df.x, aes(period, attendances)) +
geom_line() +
geom_point()
df <- ae_attendances %>%
group_by(org_code) %>%
filter(sum(type == 1) == n_months) %>%
group_by(period, add = TRUE) %>%
summarise_if(is.numeric, sum) %>%
mutate(performance = 1-breaches/attendances) %>%
nest()
df
# get a sample of the data frame
df.x <- df[1,]$data[[1]]
ggplot(df.x, aes(period, attendances)) +
geom_line() +
geom_point()
ggplot(df.x, aes(period, performance)) +
geom_hline(yintercept = 0.95, linetype = "dashed", colour = "red") +
geom_line() +
geom_point()
ggplot(df.x, aes(period, attendances)) +
geom_line() +
geom_point()
fns <- list()
fns$plot_attendances <- function(data) {
ggplot(data, aes(period, attendances)) +
geom_line() +
geom_point()
}
fns$plot_performance <- function(data) {
ggplot(data, aes(period, performance)) +
geom_hline(yintercept = 0.95, linetype = "dashed", colour = "red") +
geom_line() +
geom_point()
}
map(fns, exec, df.x)
map(fns, exec, df.x) %>% reduce(`+`)
map(fns, exec, df.x) %>% reduce(`+`) + plot_annotation("ABC")
df
df %>%
head(2) %>%
pmap(~map(fns, exec, ..2) %>% reduce(`+`) + plot_annotation(..1))
fns <- list()
fns$plot_attendances <- function(data) {
ggplot(data, aes(period, attendances)) +
geom_line() +
geom_point()
}
fns$plot_breaches <- function(data) {
ggplot(data, aes(period, breaches)) +
geom_line() +
geom_point()
}
fns$plot_performance <- function(data) {
ggplot(data, aes(period, performance)) +
geom_hline(yintercept = 0.95, linetype = "dashed", colour = "red") +
geom_line() +
geom_point()
}
df %>%
head(2) %>%
pmap(~map(fns, exec, ..2) %>% reduce(`+`) + plot_annotation(..1))
df %>%
head(2) %>%
pmap(~map(fns, exec, ..2) %>%
reduce(`+`) +
plot_layout(2) +
plot_annotation(..1))
df <- ae_attendances %>%
group_by(org_code) %>%
filter(sum(type == 1) == n_months) %>%
group_by(period, add = TRUE) %>%
summarise_if(is.numeric, sum) %>%
mutate(admission_rate = admissions/attendances,
performance = 1-breaches/attendances) %>%
nest()
fns <- list()
fns$plot_attendances <- function(data) {
ggplot(data, aes(period, attendances)) +
geom_line() +
geom_point()
}
fns$plot_breaches <- function(data) {
ggplot(data, aes(period, breaches)) +
geom_line() +
geom_point()
}
fns$plot_admission_rate <- function(data) {
ggplot(data, aes(period, admission_rate)) +
geom_line() +
geom_point()
}
fns$plot_performance <- function(data) {
ggplot(data, aes(period, performance)) +
geom_hline(yintercept = 0.95, linetype = "dashed", colour = "red") +
geom_line() +
geom_point()
}
df %>%
head(2) %>%
pmap(~map(fns, exec, ..2) %>%
reduce(`+`) +
plot_layout(2) +
plot_annotation(..1))
ae_attendances
df %>% unnest()
df %>% unnest() %>% ggplot(aes(admission_rate, performance)) + geom_point()
df %>% unnest() %>% ggplot(aes(admission_rate, performance)) + geom_point(alpha = 0.2)
df %>% unnest() %>% ggplot(aes(admission_rate, performance)) + geom_point(alpha = 0.2) + geom_smooth(method = "lm")
